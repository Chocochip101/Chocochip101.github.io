{"version":3,"file":"5893f2f6618b9a047c0b91100c53474939603466-98534811e76b0b276227.js","mappings":"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","sources":["webpack://Chocochip-Blog/./src/components/Blog/BlogHeader.tsx","webpack://Chocochip-Blog/./src/components/Post/Tag.tsx","webpack://Chocochip-Blog/./src/components/Post/PostCard.tsx","webpack://Chocochip-Blog/./src/components/Common/NoContent.tsx","webpack://Chocochip-Blog/./src/components/Blog/index.tsx","webpack://Chocochip-Blog/./src/components/Common/Animation.tsx","webpack://Chocochip-Blog/./src/layout/BaseLayout.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React from 'react';\nimport { PATH } from 'routes/path';\nimport { theme, mediaQuery } from 'theme/index';\nimport { Headline, Summary } from 'styles/typography';\nimport BlogFilter from './BlogFilter';\n\nconst BlogHeaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n\n  width: 100%;\n`;\n\nconst HeadlineContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n\n  width: 100%;\n  ${mediaQuery.sm} {\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 0px 24px;\n  }\n`;\n\nconst HeadlineWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n`;\n\nconst BlogHeaderDivider = styled.div`\n  width: 100%;\n  height: 2px;\n  /* margin-top: 40px; */\n  margin-bottom: 40px;\n  /* background-color: ${props => props.theme.lightTheme.text.dark[50]}; */\n\n  ${mediaQuery.sm} {\n    margin-top: 32px;\n    margin-bottom: 20px;\n    background-color: ${props => props.theme.lightTheme.text.dark[50]};\n  }\n`;\n\nconst LineAnimation = styled.div`\n  & h1::after {\n    display: block;\n    content: '';\n    width: 0;\n    height: 16px;\n    margin-bottom: 8px;\n    margin-top: -24px;\n    background-color: ${props => props.theme.colors.primary[500]};\n    transition: width 0.3s;\n  }\n  &:hover {\n    & h1::after {\n      width: 100%;\n    }\n  }\n`;\n\ninterface BlogHeaderProps {\n  selectedTag: string;\n}\n\nconst BlogHeader = ({ selectedTag }: BlogHeaderProps) => {\n  return (\n    <BlogHeaderWrapper>\n      <HeadlineContainer>\n        <HeadlineWrapper>\n          <Link to={PATH.index}>\n            <LineAnimation>\n              <Headline textColor={theme.colors.primary.default}>\n                #Tech\n              </Headline>\n            </LineAnimation>\n          </Link>\n          <LineAnimation>\n            <Headline>#{selectedTag}</Headline>\n          </LineAnimation>\n        </HeadlineWrapper>\n        {/* <BlogFilter /> */}\n      </HeadlineContainer>\n      <BlogHeaderDivider />\n    </BlogHeaderWrapper>\n  );\n};\n\nexport default BlogHeader;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport { theme } from 'theme/index';\nimport { Tag as TagTypo } from 'styles/typography';\n\nconst TagBox = styled(Link)`\n  display: inline-block;\n  margin-right: 12px;\n  border-radius: 1000px;\n`;\n\nconst LineAnimation = styled.div`\n  & p::after {\n    display: block;\n    content: '';\n    width: 0;\n    height: 2px;\n    margin-bottom: 2px;\n    margin-top: -4px;\n    background-color: ${props => props.theme.colors.primary[300]};\n    transition: width 0.3s;\n  }\n  &:hover {\n    & p::after {\n      width: 100%;\n    }\n  }\n`;\n\ninterface TagProps {\n  tag: string;\n}\n\nconst Tag = ({ tag }: TagProps) => {\n  return (\n    <TagBox to={`/?tag=${tag}`}>\n      <LineAnimation>\n        <TagTypo textColor={theme.colors.primary.default}>#{tag}</TagTypo>\n      </LineAnimation>\n    </TagBox>\n  );\n};\n\nexport default Tag;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport { PostFrontMatterType } from 'types/Post.types';\nimport { mediaQuery } from 'theme/breakpoints';\nimport { Caption2, Heading2, Summary } from 'styles/typography';\nimport Tag from './Tag';\n\nconst PostCardBox = styled.article`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n\n  width: 100%;\n  padding: 16px 0px;\n  border-radius: 12px;\n  /* & h1::after {\n    display: block;\n    content: '';\n    width: 0;\n    height: 32px;\n    margin-top: -32px;\n    background-color: ${props => props.theme.colors.primary[100]};\n    transition: width 0.3s;\n  }\n  &:hover {\n    & h1::after {\n      width: 100%;\n    }\n  } */\n\n  &:hover {\n    /* transform: translateY(-6px); */\n    /* & h1 {\n      color: ${props => props.theme.colors.dark[200]};\n    } */\n    .postcard-thumbnail {\n      opacity: 0.75;\n    }\n  }\n\n  ${mediaQuery.sm} {\n    padding: 16px 24px;\n    border-radius: 0px;\n  }\n`;\n\nconst PostCardDivider = styled.div`\n  width: 100%;\n  height: 2px;\n  margin: 20px 0px;\n  background-color: ${props => props.theme.colors.light[100]};\n\n  ${mediaQuery.sm} {\n    margin: 16px 0px;\n    background-color: ${props => props.theme.colors.light[100]};\n  }\n`;\n\nconst ThumbnailBox = styled.div`\n  min-width: 328px;\n  width: 328px;\n  height: 220px;\n  border-radius: 12px;\n  overflow: hidden;\n  isolation: isolate;\n\n  ${mediaQuery.sm} {\n    visibility: hidden;\n    position: absolute;\n    left: 40px;\n    opacity: 0;\n  }\n`;\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  object-position: center;\n`;\n\nconst PostCardTextBox = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  margin-left: 48px;\n  margin-right: 40px;\n\n  ${mediaQuery.sm} {\n    max-width: 100%;\n    margin: 0px;\n  }\n`;\n\nconst Date = styled.div`\n  margin-bottom: 10px;\n  & p {\n    color: ${({ theme }) => theme.lightTheme.text.light[500]};\n  }\n`;\n\nconst Margin = styled.div`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  & p {\n    color: ${({ theme }) => theme.lightTheme.text.dark[150]};\n  }\n`;\n\nconst TagBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\ninterface PostCardProps {\n  slug: string;\n  postData: PostFrontMatterType;\n}\n\nconst PostCard = ({ slug, postData }: PostCardProps) => {\n  const { title, date, summary, thumbnail, tags } = postData;\n  return (\n    <Link to={slug}>\n      <PostCardBox>\n        <ThumbnailBox className=\"postcard-thumbnail\">\n          <ThumbnailImage\n            loading=\"lazy\"\n            image={thumbnail.childImageSharp.gatsbyImageData}\n            alt={`${title}_thumbnail`}\n          />\n        </ThumbnailBox>\n        <PostCardTextBox>\n          <Date>\n            <Caption2>{date}</Caption2>\n          </Date>\n          <Heading2>{title}</Heading2>\n          <Margin>\n            <Summary className=\"typography-ellipsis-2line\">{summary}</Summary>\n          </Margin>\n          <TagBox>\n            {tags.map((tag, index) => (\n              <Tag key={`${tag}_${index}`} tag={tag} />\n            ))}\n          </TagBox>\n        </PostCardTextBox>\n      </PostCardBox>\n      <PostCardDivider />\n    </Link>\n  );\n};\n\nexport default PostCard;\n","import React from 'react';\nimport NoContentLottie from 'images/lotties/no-content.json';\nimport { Animations } from './Animation';\nimport styled from '@emotion/styled';\nimport { useResponsive } from 'hooks/useResponsive';\nimport { theme, breakpoints } from 'theme/index';\nimport { Heading2, Subtitle } from 'styles/typography';\n\nconst FlexContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  padding-top: 40px;\n\n  width: 100%;\n  height: 100%;\n`;\n\nconst Margin = styled.div`\n  margin-top: -20px;\n  margin-bottom: 12px;\n`;\n\nconst NoContent = () => {\n  const mobileSize = useResponsive(breakpoints.md);\n  return (\n    <FlexContainer>\n      <Animations\n        width={mobileSize ? 300 : 520}\n        height={mobileSize ? 240 : 400}\n        animation={NoContentLottie}\n      />\n      <Margin>\n        <Heading2 textColor={theme.colors.bluegray[600]}>\n          피드가 텅! 비었어요\n        </Heading2>\n      </Margin>\n      <Subtitle textColor={theme.colors.primary[200]}>\n        곧 새로운 소식이 올라올지도 몰라요\n      </Subtitle>\n    </FlexContainer>\n  );\n};\n\nexport default NoContent;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { PostType } from 'types/Post.types';\nimport BlogHeader from './BlogHeader';\nimport PostCard from '../Post/PostCard';\nimport NoContent from '../Common/NoContent';\nimport { mediaQuery } from 'theme/index';\n\nconst BlogContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n\n  width: 100%;\n  padding-top: 60px;\n\n  ${mediaQuery.sm} {\n    padding-top: 40px;\n  }\n`;\n\nconst PostWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n\n  width: 100%;\n  padding-bottom: 120px;\n\n  ${mediaQuery.sm} {\n    padding-bottom: 60px;\n  }\n`;\n\ninterface BlogLayoutProps {\n  posts: PostType[];\n  selectedTag: string;\n}\n\nconst Blog = ({ posts, selectedTag }: BlogLayoutProps) => {\n  const currentPostList = React.useMemo(\n    () =>\n      posts.filter(\n        ({\n          node: {\n            frontmatter: { tags },\n          },\n        }: PostType) =>\n          selectedTag !== 'All' ? tags.includes(selectedTag) : true,\n      ),\n    [selectedTag],\n  );\n\n  return (\n    <BlogContainer>\n      {currentPostList ? (\n        <>\n          <BlogHeader selectedTag={selectedTag} />\n          <PostWrapper>\n            <section>\n              {currentPostList.map((post, index) => {\n                return (\n                  <PostCard\n                    key={`post_${index}`}\n                    slug={post.node.fields.slug}\n                    postData={post.node.frontmatter}\n                  />\n                );\n              })}\n            </section>\n          </PostWrapper>\n        </>\n      ) : (\n        <NoContent />\n      )}\n    </BlogContainer>\n  );\n};\n\nexport default Blog;\n","import React, { useEffect, createRef } from 'react';\nimport lottie from 'lottie-web';\n\ninterface Props {\n  animation: unknown;\n  height?: number;\n  width?: number;\n  loop?: boolean;\n  autoplay?: boolean;\n}\n\nexport const Animations: React.FC<Props> = ({\n  animation,\n  height = 480,\n  width = 480,\n  loop = true,\n  autoplay = true,\n}) => {\n  const animationContainer = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const anim = lottie.loadAnimation({\n      container: animationContainer.current,\n      renderer: 'svg',\n      loop,\n      autoplay,\n      animationData: animation,\n    });\n    return () => anim.destroy(); // optional clean up for unmounting\n  }, []);\n\n  return (\n    <div\n      style={{ height, width, objectFit: 'contain' }}\n      ref={animationContainer}\n    />\n  );\n};\n","import { Global, ThemeProvider } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React from 'react';\nimport { globalStyle } from 'styles';\nimport Footer from 'components/Navigation/Footer';\nimport Header from 'components/Navigation/Header';\nimport { theme } from 'theme/index';\nimport { mediaQuery } from 'theme/breakpoints';\nimport { Helmet } from 'react-helmet';\n\nconst Body = styled.main`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: center;\n\n  max-width: 1200px;\n  width: 100%;\n  min-height: calc(100vh - 80px); // minus footer height\n  height: 100%;\n  padding: 0px 40px;\n  padding-top: 72px; // padding to header height\n  margin: 0 auto;\n  background-color: ${({ theme }) => theme.lightTheme.backgroundColor};\n  transition: all 0.5s ease-in-out;\n\n  ${mediaQuery.sm} {\n    padding: 40px 0px;\n    padding-top: 72px;\n  }\n`;\n\ntype BaseLayoutProps = {\n  path: string;\n  children: React.ReactNode;\n  meta?: {\n    title: string;\n    description: string;\n    image: string;\n    url: string;\n  };\n};\n\nconst INITIAL_META = {\n  title: 'Chocochip Blog',\n  description: \"Chocochips Tech Blog\",\n  image: '/static/profile-image.jpeg',\n  url: 'https://blog.chocochip.co.kr/',\n};\n\nconst BaseLayout = ({ path, children, meta }: BaseLayoutProps) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Helmet>\n        <html lang=\"ko\" />\n        <title>{meta ? meta.title : INITIAL_META.title}</title>\n        <meta\n          name=\"description\"\n          content={meta ? meta.description : INITIAL_META.description}\n        />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta httpEquiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\n\n        <meta property=\"og:type\" content=\"website\" />\n        <meta\n          property=\"og:title\"\n          content={meta ? meta.title : INITIAL_META.title}\n        />\n        <meta\n          property=\"og:description\"\n          content={meta ? meta.description : INITIAL_META.description}\n        />\n        <meta\n          property=\"og:image\"\n          content={meta ? meta.image : INITIAL_META.image}\n        />\n        <meta property=\"og:url\" content={meta ? meta.url : INITIAL_META.url} />\n        <meta\n          property=\"og:site_name\"\n          content={meta ? meta.title : INITIAL_META.title}\n        />\n        <meta\n          name=\"google-site-verification\"\n          content=\"i1k9fAJNvByDpCtfnvLiC1aCfhuag46Ftm5CVnntwrI\"\n        />\n      </Helmet>\n      <Global styles={globalStyle} />\n      <Header path={path} />\n      <Body>{children}</Body>\n      <Footer />\n    </ThemeProvider>\n  );\n};\n\nexport default BaseLayout;\n"],"names":["BlogHeaderWrapper","_styled","target","name","styles","HeadlineContainer","mediaQuery","HeadlineWrapper","BlogHeaderDivider","props","theme","lightTheme","text","dark","LineAnimation","colors","primary","_ref","selectedTag","___EmotionJSX","Link","to","PATH","Headline","textColor","TagBox","tag","TagTypo","PostCardBox","PostCardDivider","light","ThumbnailBox","ThumbnailImage","GatsbyImage","PostCardTextBox","Date","Margin","_ref2","_ref3","slug","postData","title","date","summary","thumbnail","tags","className","loading","image","childImageSharp","gatsbyImageData","alt","Caption2","Heading2","Summary","map","index","Tag","key","FlexContainer","NoContent","mobileSize","useResponsive","breakpoints","Animations","width","height","animation","NoContentLottie","Subtitle","BlogContainer","PostWrapper","posts","currentPostList","React","filter","node","frontmatter","includes","BlogHeader","post","PostCard","fields","loop","autoplay","animationContainer","createRef","useEffect","anim","lottie","container","current","renderer","animationData","destroy","style","objectFit","ref","Body","backgroundColor","INITIAL_META","path","children","meta","ThemeProvider","Helmet","lang","content","description","httpEquiv","property","url","Global","globalStyle","Header","Footer"],"sourceRoot":""}